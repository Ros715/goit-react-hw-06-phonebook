{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","redux/actions-types.js","redux/actions.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","className","styles","form","style","marginBottom","e","preventDefault","type","value","pattern","title","required","onChange","currentTarget","Filter","connect","onDelete","contacts","useSelector","state","filter","contact","toLowerCase","includes","fits","map","onClick","id","types","addContact","createAction","deleteContact","changeFilter","dispatch","useDispatch","length","alert","uuidv4","contactId","createReducer","action","payload","item","rootReducer","combineReducers","persistConfig","key","version","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.52bdff46.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1jaJ_\"};","import React, { useState } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={styles.form}\r\n      style={{ marginBottom: \"32px\" }}\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state.name, this.state.number);\r\n        onSubmit(name, number);\r\n        reset();\r\n      }}\r\n    >\r\n      <p>Name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"name\", e.currentTarget.value);\r\n          setName(e.currentTarget.value);\r\n        }}\r\n      />\r\n\r\n      <p>Number</p>\r\n      <input\r\n        type=\"tel\"\r\n        value={number}\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"number\", e.currentTarget.value);\r\n          setNumber(e.currentTarget.value);\r\n        }}\r\n      />\r\n      <div>\r\n        <br />\r\n        <button type=\"submit\">Add contact</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","//import styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <div>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          //console.log(e.currentTarget.value);\r\n          onChange(e.currentTarget.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","//import styles from \"./ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, /*useDispatch,*/ connect } from \"react-redux\";\r\n\r\nfunction fits(name, filter) {\r\n  return name.toLowerCase().includes(filter.toLowerCase());\r\n}\r\n\r\nfunction ContactList({ /*contacts, filter,*/ onDelete }) {\r\n  const contacts = useSelector((state) => state.contacts);\r\n  const filter = useSelector((state) => state.filter);\r\n\r\n  return (\r\n    <ul>\r\n      {contacts\r\n        .filter((contact) => fits(contact.name, filter))\r\n        .map((contact) => {\r\n          return (\r\n            <li key={contact.id}>\r\n              {contact.name} {contact.number}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onDelete(contact.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  //contacts: PropTypes.array.isRequired,\r\n  //filter: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect()(ContactList);\r\n","export const types = {\r\n  ADD_CONTACT: \"ADD_CONTACT\",\r\n  DELETE_CONTACT: \"DELETE_CONTACT\",\r\n  CHANGE_FILTER: \"CHANGE_FILTER\",\r\n};\r\n","///// step 2\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\nimport { types } from \"./actions-types\";\r\n\r\nexport const addContact = createAction(types.ADD_CONTACT);\r\nexport const deleteContact = createAction(types.DELETE_CONTACT);\r\nexport const changeFilter = createAction(types.CHANGE_FILTER);\r\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm.js\";\nimport Filter from \"./components/Filter/Filter.js\";\nimport ContactList from \"./components/ContactList/ContactList.js\";\nimport \"./App.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { addContact, deleteContact, changeFilter } from \"./redux/actions\";\n\nfunction App() {\n  //const fullState = useSelector((state) => state);\n  //console.log(fullState);\n  const contacts = useSelector((state) => state.contacts);\n  //const filter = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  const onAddContact = (name, number) => {\n    const selectedContact = contacts.filter((contact) => {\n      return contact.name === name;\n    });\n    if (selectedContact.length > 0) {\n      alert(name + \" is already in contacts\");\n    } else {\n      dispatch(addContact({ id: uuidv4(), name, number }));\n    }\n  };\n\n  const onChangeFilter = (filter) => {\n    dispatch(changeFilter(filter));\n  };\n\n  const onDeleteContact = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={onAddContact} />\n\n      <h2>Contacts</h2>\n      <Filter onChange={onChangeFilter} />\n      <ContactList onDelete={onDeleteContact} />\n    </div>\n  );\n}\n\n/*contacts={contacts}\n  filter={filter}*/\n\nexport default connect()(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, changeFilter } from \"./actions\";\r\n\r\nconst contacts = createReducer([], {\r\n  [addContact]: (state, action) => [...state, action.payload],\r\n  [deleteContact]: (state, action) =>\r\n    state.filter((item) => item.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n\r\nexport default rootReducer;\r\n","//https://redux-toolkit.js.org/usage/usage-guide#use-with-redux-persist\r\n//requires: npm install redux-persist\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  version: 1,\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nexport let persistor = persistStore(store);\r\n\r\n//continuation in index.js\r\n\r\n/* vesion without persist store\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { rootReducer } from \"./reducers\";\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n//export default store;\r\n*/\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store, persistor } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}