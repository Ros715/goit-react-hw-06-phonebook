{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","redux/actions.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","className","styles","form","style","marginBottom","e","preventDefault","type","value","pattern","title","required","onChange","currentTarget","Filter","connect","onDelete","contacts","useSelector","state","items","filter","contact","toLowerCase","includes","fits","map","onClick","id","addContact","createAction","deleteContact","changeFilter","reducer","createReducer","ADD_CONTACT","action","payload","DELETE_CONTACT","item","CHANGE_FILTER","dispatch","useDispatch","length","alert","uuidv4","contactId","store","configureStore","devTools","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b40c596.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1jaJ_\"};","import React, { useState } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const reset = () => {\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className={styles.form}\r\n      style={{ marginBottom: \"32px\" }}\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state.name, this.state.number);\r\n        onSubmit(name, number);\r\n        reset();\r\n      }}\r\n    >\r\n      <p>Name</p>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={name}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"name\", e.currentTarget.value);\r\n          setName(e.currentTarget.value);\r\n        }}\r\n      />\r\n\r\n      <p>Number</p>\r\n      <input\r\n        type=\"tel\"\r\n        value={number}\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        onChange={(e) => {\r\n          //console.log(\"number\", e.currentTarget.value);\r\n          setNumber(e.currentTarget.value);\r\n        }}\r\n      />\r\n      <div>\r\n        <br />\r\n        <button type=\"submit\">Add contact</button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","//import styles from \"./Filter.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Filter({ onChange }) {\r\n  return (\r\n    <div>\r\n      <p>Find contacts by name</p>\r\n      <input\r\n        type=\"text\"\r\n        onChange={(e) => {\r\n          //console.log(e.currentTarget.value);\r\n          onChange(e.currentTarget.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","//import styles from \"./ContactList.module.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, /*useDispatch,*/ connect } from \"react-redux\";\r\n\r\nfunction fits(name, filter) {\r\n  return name.toLowerCase().includes(filter.toLowerCase());\r\n}\r\n\r\nfunction ContactList({ /*contacts, filter,*/ onDelete }) {\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n\r\n  return (\r\n    <ul>\r\n      {contacts\r\n        .filter((contact) => fits(contact.name, filter))\r\n        .map((contact) => {\r\n          return (\r\n            <li key={contact.id}>\r\n              {contact.name} {contact.number}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onDelete(contact.id);\r\n                }}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  //contacts: PropTypes.array.isRequired,\r\n  //filter: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect()(ContactList);\r\n","///// step 2\r\nimport { createAction, createReducer } from \"@reduxjs/toolkit\";\r\n\r\n//import { ADD_CONTACT, DELETE_CONTACT, CHANGE_FILTER } from \"./actions-types\";\r\nconst ADD_CONTACT = \"ADD_CONTACT\";\r\nconst DELETE_CONTACT = \"DELETE_CONTACT\";\r\nconst CHANGE_FILTER = \"CHANGE_FILTER\";\r\n\r\nconst INITIAL_STATE = {\r\n  contacts: {\r\n    items: [],\r\n    filter: \"\",\r\n  },\r\n};\r\n\r\n/*\r\n///// step 1\r\nexport function addContact(contact) { //id, name, number\r\n  return {\r\n    type: ADD_CONTACT,\r\n    payload: contact, //{ id, name, number },\r\n  };\r\n}\r\n\r\nexport function deleteContact(id) {\r\n  return { type: DELETE_CONTACT, payload: id };\r\n}\r\n\r\nexport function changeFilter(text) {\r\n  return { type: CHANGE_FILTER, payload: text };\r\n}\r\n\r\nexport const reducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ...state.contacts,\r\n          items: [...state.contacts.items, action.payload],\r\n        },\r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ...state.contacts,\r\n          items: state.contacts.items.filter((item) => {\r\n            return item.id !== action.payload;\r\n          }),\r\n        },\r\n      };\r\n    case CHANGE_FILTER:\r\n      return {\r\n        ...state,\r\n        contacts: {\r\n          ...state.contacts,\r\n          filter: action.payload,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n*/\r\n\r\n///// step 2\r\n//import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(ADD_CONTACT);\r\nexport const deleteContact = createAction(DELETE_CONTACT);\r\nexport const changeFilter = createAction(CHANGE_FILTER);\r\n\r\nexport const reducer = createReducer(INITIAL_STATE, {\r\n  ADD_CONTACT: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: {\r\n        ...state.contacts,\r\n        items: [...state.contacts.items, action.payload],\r\n      },\r\n    };\r\n  },\r\n  //state.contacts.items.push(action.payload),\r\n  DELETE_CONTACT: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: {\r\n        ...state.contacts,\r\n        items: state.contacts.items.filter((item) => {\r\n          return item.id !== action.payload;\r\n        }),\r\n      },\r\n    };\r\n  },\r\n  //(state.contacts.items = state.contacts.items.filter(\r\n  //  (item) => item.id !== action.payload\r\n  //)),\r\n  CHANGE_FILTER: (state, action) => {\r\n    return {\r\n      ...state,\r\n      contacts: {\r\n        ...state.contacts,\r\n        filter: action.payload,\r\n      },\r\n    };\r\n  },\r\n  //(state.contacts.filter = action.payload),\r\n});\r\n","import React from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm.js\";\nimport Filter from \"./components/Filter/Filter.js\";\nimport ContactList from \"./components/ContactList/ContactList.js\";\nimport \"./App.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { addContact, deleteContact, changeFilter } from \"./redux/actions\";\n\nfunction App() {\n  const contacts = useSelector((state) => state.contacts.items);\n  //const filter = useSelector((state) => state.contacts.filter);\n  const dispatch = useDispatch();\n  //console.log(\"filter=\", filter, \"contacts=\", contacts);\n\n  const onAddContact = (name, number) => {\n    const selectedContact = contacts.filter((contact) => {\n      return contact.name === name;\n    });\n    if (selectedContact.length > 0) {\n      alert(name + \" is already in contacts\");\n    } else {\n      dispatch(addContact({ id: uuidv4(), name, number }));\n    }\n  };\n\n  const onChangeFilter = (filter) => {\n    dispatch(changeFilter(filter));\n  };\n\n  const onDeleteContact = (contactId) => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={onAddContact} />\n\n      <h2>Contacts</h2>\n      <Filter onChange={onChangeFilter} />\n      <ContactList onDelete={onDeleteContact} />\n    </div>\n  );\n}\n\n/*contacts={contacts}\n  filter={filter}*/\n\nexport default connect()(App);\n","/*\r\n///// step 1\r\nimport { createStore } from \"redux\";\r\nimport { reducer } from \"./reducer\";\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n//export default store;\r\n*/\r\n\r\n///// step 2\r\n//import { combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { reducer } from \"./actions\";\r\n\r\n//const rootReducer = combineReducers({\r\n//  reducer,\r\n//});\r\n//ERROR: rootReducer in below definition of store does not work !!!\r\n\r\nexport const store = configureStore({\r\n  //rootReducer,   does not work\r\n  reducer, // this works\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n//export default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}